#include <bits/stdc++.h>
using namespace std;
int n, arr[200005], chk[200005];

/*
크게 두가지 경우로 나누어서 생각하면 된다.
첫번째는 수중에 있는 0카드를 쓰지 않고 완성 시키는 방법이고
두번째는 0카드를 쓰면서 덱에 있는 수들을 빼서 완성 시키는 방법이다.
우선 첫번째 방법은
0 0 0 0 0        4 5 3 0 0 
1 2 3 4 5 이것과  0 0 0 1 2 이것처럼 덱에 있는 1이 덱의 끝까지 가면서 오름차순인 경우다.
이런 경우는 수중에 있는 카드를 이용해서 나머지 오름차순을 완성 시킬 수 있는지 확인하면 된다.
0 3 4 0 0 0
5 6 0 0 1 2 이것처럼 덱의 오름차순이 2부분으로 나누어져 있는 경우다.
이것은 앞부분의 5 6이 3 4를 쓰면서 뽑을수 있는지 확인하면 된다. 확인하는 방법은
3 4를 쓸땐 2장의 카드를 뽑게 되므로 5는 인덱스 2이하에 있어야 하고 6은 인덱스 3이하에 있어야 한다.
이제 두번째 방법은
0 0 0 3 2
0 1 4 0 5 처럼 반드시 0카드를 써야 완성시킬 수 있는 경우다.
이때 0카드를 몇번이나 쓰는지 확인하는 방법은 덱에있는 숫자 1 4 5가 자기 숫자에 맞는 인덱스
1 4 5에 얼마나 떨어져 있는지 확인하면 된다. 1은 인덱스 1보다 1큰 2에 있으므로 1을 뽑으려면
반드시 0카드를 최소 1장 이상 써야 한다. 4카드는 4를 뽑기 전에 1, 2, 3을 쓰므로 0카드를 뽑지 않아도 된다.
5는 5를 뽑는 동안 1 2 3 4를 쓰므로 0장이다. 그리고 이렇게 다 뽑았으면 다시 덱에 넣어야 하므로
+n을 하면 된다.
*/

int main()
{
    scanf("%d", &n);
    for(int i = 0; i < n; i++)
    {
        int num;
        scanf("%d", &num);
        //해당 카드는 수중에 있음을 표시
        chk[num] = -1;
    }
    for(int i = 1; i <= n; i++)
    {
        scanf("%d", &arr[i]);
        chk[arr[i]] = i;
    }
    int number = 1, count = 0, Max = 0;
    //1이 덱에 있는 경우
    if(chk[1] != -1)
    {
        //1이 카드 끝까지 이어지는 오름차순의 스타트인지 확인
        for(int i = chk[1]; i <= n; i++)
        {
            if(arr[i] + 1 != arr[i + 1])
            {
                number = arr[i] + 1;
                break;
            }
        }
        //수중에 덱에 없는 카드들이 있는지 확인
        for(int i = number; i <= n; i++)
        {
            if(chk[i] != -1)
                break;
            count++;
        }
        //덱에서 1부터 덱의 끝까지 오름차순이고 수중에 덱에 없는 카드가 있는 경우
        if(count == n - number + 1 && chk[number - 1] == n)
        {
            printf("%d", count);
            return 0;
        }
        int flag = 0;
        //덱의 앞부분에 있는 카드들을 뽑을 경우 덱에 1부터 n까지 오름차순으로 맞출수 있는지 확인
        for(int i = number + count, j = count; i <= n; i++, j++)
        {
            if(chk[i] > j)
                flag = 1;
        }
        if(flag == 0 && chk[number - 1] == n && count != 0)
        {
            printf("%d", n - number + 1);
            return 0;
        }
    }
    Max = 0;
    for(int i = 1; i <= n; i++)
    {
        //이 카드를 뽑기위해 몇장의 0카드를 써야 하는지 확인
        if(chk[i] != -1)
            Max = max(Max, chk[i] - i + 1);
    }
    printf("%d", n + Max);
}